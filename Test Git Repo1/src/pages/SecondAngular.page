<apex:page controller="AngularJSDemoController">
<script src="//ajax.googleapis.com/ajax/libs/angularjs/1.0.7/angular.min.js"></script>
<script>
// Define a new module for our app. The array holds the names of dependencies if any.
var app = angular.module("instantSearch", []);

// Create the instant search filter

app.filter('searchFor', function(){

    // All filters must return a function. The first parameter is the data that is to be filtered, 
    // and the second is an argument that may be passed with a colon (searchFor:searchString)

    return function(arr, searchString){

        if(!searchString){
            return arr;
        }

        var result = [];

        searchString = searchString.toLowerCase();

        // Using the forEach helper method to loop through the array
        angular.forEach(arr, function(item){

            if(item.name.toLowerCase().indexOf(searchString) !== -1){
                result.push(item);
            }

        });

        return result;
    };

});

function Fun1(){
    alert('hey');
}
// The controller
function InstantSearchController($scope){
    $scope.items = {!lstAccount};
}

</script>
<!-- Initialize a new AngularJS app and associate it with a module named "instantSearch"-->
<div ng-app="instantSearch" ng-controller="InstantSearchController">

    <div class="bar">
        <!-- Create a binding between the searchString model and the text field -->
        <input type="text" ng-model="searchString" placeholder="Enter your search terms" />
        <input type="button" value="Button" ng-click="count = count + 1" ng-init="count=0"/>
        Count : {{count}}
    </div>

    <ul>
        <!-- Render a li element for every entry in the items array. Notice the custom search filter "searchFor". It takes the value of the
             searchString model as an argument. 
         -->
        <li ng-repeat="i in items | searchFor:searchString">
            <p>{{i.name}}</p>
        </li>

    </ul>
</div>

</apex:page>